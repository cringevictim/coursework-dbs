import asyncio
import logging
import sys
import json

from PostgreSQL import PostgreSQLDatabase
from Redis import RedisClient
from CouchDB import CouchDBClient

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters.callback_data import CallbackData
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils.markdown import hbold

admin_password = '1111'

users_db = PostgreSQLDatabase(db_name='users', db_user='postgres', db_password='postgres')
user_cache = RedisClient()
flights_db = CouchDBClient()
couchID: str

TOKEN = "6465778947:AAFD4MTAqvFYByAjUjC1-WPaKk0GTej_d98"
router = Router()
dp = Dispatcher()
dp.include_router(router=router)


class Form(StatesGroup):
    login = State()
    registration = State()
    dest1 = State()
    dest2 = State()
    select = State()
    selected = State()
    admin_search = State()
    waiting_old_password = State()
    waiting_new_password = State()
    waiiting_admin_password = State()


class LoginSuccess(CallbackData, prefix="login_success"):
    num: int


class LoginCallback(CallbackData, prefix="login"):
    phone: str
    id: str
    num: int


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    kb = [types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º‚òéÔ∏è", request_contact=True)]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)
    await message.answer(
        f"–í—ñ—Ç–∞—é, {hbold(message.from_user.full_name)}!\n"
        f"–î–ª—è —Ç–æ–≥–æ, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ä–æ–±–æ—Ç—É —Ç—Ä–µ–±–∞ —É–≤—ñ–π—Ç–∏ —É —Å–∏—Å—Ç–µ–º—É."
        f"\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –≤—Ö–æ–¥—É:", reply_markup=keyboard)


@router.message((F.text == "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏‚ùå") | (F.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥‚óÄÔ∏è"))
async def enter_new_number_handler(message: Message, state=FSMContext) -> None:
    await state.clear()
    kb = [types.KeyboardButton(text="–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º‚òéÔ∏è", request_contact=True)]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)
    await message.answer("–î–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä:", reply_markup=keyboard)


@router.message(F.contact)
async def share_phone_number_handler(message: Message, state: FSMContext) -> None:
    kb = [types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏‚ùå")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)

    users_db_record_to_find = {
        'phone': message.contact.phone_number
    }

    number_check = users_db.contains_record(table_name='users', record=users_db_record_to_find)
    if number_check:
        user_cache.set_hash(message.from_user.id, key='phone', value=message.contact.phone_number)
        await message.answer(reply_markup=keyboard, text="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å:")
        await state.set_state(Form.login)
    else:
        user_cache.set_hash(message.from_user.id, key='phone', value=message.contact.phone_number)
        users_db.insert_record(table_name='users', data=users_db_record_to_find)
        kb1 = [types.KeyboardButton(text="–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥‚óÄÔ∏è")]
        keyboard1 = types.ReplyKeyboardMarkup(
            keyboard=[kb1],
            resize_keyboard=True)
        await message.answer(reply_markup=keyboard1, text="–¶–µ–π –Ω–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π‚ùå")
        await message.answer(reply_markup=keyboard1, text="–î–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
        await state.set_state(Form.registration)


@router.message(Form.registration)
async def registration_handler(message: Message, state: FSMContext):
    users_db_updated_record = {
        'password': message.text
    }
    users_db_where_clause = "phone = '" + user_cache.get_hash(message.from_user.id, key='phone') + "'"
    print(users_db_where_clause)
    users_db.update_record(table_name='users', data=users_db_updated_record, where_clause=users_db_where_clause)

    await state.clear()
    kb1 = [types.KeyboardButton(text="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏‚ñ∂Ô∏è")]
    keyboard1 = types.ReplyKeyboardMarkup(
        keyboard=[kb1],
        resize_keyboard=True)
    await message.answer(reply_markup=keyboard1, text="–ü–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π")


@router.message(F.text == "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏‚ñ∂Ô∏è")
async def continue_handler(message: Message):
    kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
    kb2 = [types.KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è"), types.KeyboardButton(text="–í–∏—Ö—ñ–¥‚ùå")]
    keyboard1 = types.ReplyKeyboardMarkup(
        keyboard=[kb1, kb2],
        resize_keyboard=True)
    await message.answer(reply_markup=keyboard1, text="‚úÖ–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞!")


@router.message(Form.login)
async def login_handler(message: Message, state: FSMContext) -> None:
    users_db_record_to_find = {
        'password': message.text,
        'phone': user_cache.get_hash(message.from_user.id, key='phone')
    }
    password_check = users_db.contains_record(table_name='users', record=users_db_record_to_find)

    users_db_record_to_find = {
        'is_admin': 't',
        'phone': user_cache.get_hash(message.from_user.id, key='phone')
    }
    admin_check = users_db.contains_record(table_name='users', record=users_db_record_to_find)

    if password_check:
        if admin_check:
            kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üîç")]
            keyboard1 = types.ReplyKeyboardMarkup(
                keyboard=[kb1],
                resize_keyboard=True)
            await message.answer("‚úÖ–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–∏–π", reply_markup=keyboard1)
            await state.clear()
        else:
            kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
            kb2 = [types.KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è")]
            keyboard1 = types.ReplyKeyboardMarkup(
                keyboard=[kb1, kb2],
                resize_keyboard=True)
            await message.answer("‚úÖ–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–∏–π", reply_markup=keyboard1)
            await state.clear()
    else:
        kb = [types.KeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∏—Ç–∏‚ùå")]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[kb],
            resize_keyboard=True)
        await state.clear()
        await message.answer("–ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π!")
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —â–µ —Ä–∞–∑:", reply_markup=keyboard)
        await state.set_state(Form.login)


@router.message(F.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")
async def go_to_main_menu_handler(message: Message, state: FSMContext) -> None:
    kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
    kb2 = [types.KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è")]
    keyboard1 = types.ReplyKeyboardMarkup(
        keyboard=[kb1, kb2],
        resize_keyboard=True)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:", reply_markup=keyboard1)
    await state.clear()


@router.message(F.text == "–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç")
async def search_for_tickets_handler(message: Message, state: FSMContext) -> None:
    kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
    kb2 = [types.KeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb1, kb2],
        resize_keyboard=True)
    await state.set_state(Form.dest1)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—É–Ω–∫—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:", reply_markup=keyboard)


@router.message(F.text == "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è")
async def user_settings_handler(message : Message, state: FSMContext) -> None:
    kb1 = [types.KeyboardButton(text="–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—åüîê"), types.KeyboardButton(text="–°—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüë®‚Äçüíº")]
    kb2 = [types.KeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb1, kb2],
        resize_keyboard=True)
    await message.answer(reply_markup=keyboard, text="–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:")


@router.message(F.text == "–ó–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–æ–ª—åüîê")
async def user_settings_handler(message : Message, state: FSMContext) -> None:
    await message.answer(text="–í–≤–µ–¥—ñ—Ç—å —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(Form.waiting_old_password)


@router.message(F.text == "–°—Ç–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–ºüë®‚Äçüíº")
async def user_admin_handler(message : Message, state: FSMContext) -> None:
    await message.answer(text="–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(Form.waiiting_admin_password)


@router.message(Form.waiting_old_password)
async def receive_old_password_handler(message: Message, state: FSMContext):
    users_db_password = {
        'phone': user_cache.get_hash(message.from_user.id, key='phone'),
        'password': message.text
    }
    password_is_correct = users_db.contains_record(table_name='users', record=users_db_password)

    if password_is_correct:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:")
        await state.set_state(Form.waiting_new_password)
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å!")
        await state.set_state(Form.login)


@router.message(Form.waiting_new_password)
async def set_new_password_handler(message: Message, state: FSMContext):
    users_db_password = {
        'password': message.text
    }
    users_db.update_record(table_name='users', data=users_db_password, where_clause="phone = '" + user_cache.get_hash(message.from_user.id, key='phone') + "'")

    kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
    kb2 = [types.KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è")]
    keyboard1 = types.ReplyKeyboardMarkup(
        keyboard=[kb1, kb2],
        resize_keyboard=True)
    await message.answer("‚úÖ–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=keyboard1)
    await state.clear()


@router.message(Form.waiiting_admin_password)
async def receive_old_password_handler(message: Message, state: FSMContext):
    if message.text == admin_password:
        users_db_admin = {
            'is_admin': 't'
        }
        users_db.update_record(table_name='users', data=users_db_admin, where_clause="phone = '" + user_cache.get_hash(message.from_user.id, key='phone') + "'")
        kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
        kb2 = [types.KeyboardButton(text="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è‚öôÔ∏è")]
        keyboard1 = types.ReplyKeyboardMarkup(
            keyboard=[kb1, kb2],
            resize_keyboard=True)
        await message.answer("‚úÖ–í–∏ —Å—Ç–∞–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!", reply_markup=keyboard1)
        await state.clear()
    else:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        await state.set_state(Form.login)


@router.message(Form.dest1)
async def dep_point_handler(message: Message, state: FSMContext) -> None:
    kb = [types.KeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)
    await state.set_state(Form.dest2)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—É–Ω–∫—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:", reply_markup=keyboard)

    user_cache.set_hash(message.from_user.id, 'data', message.text)


def find_flights(departure, arrival, json_data):
    matching_flights = []
    data = json.dumps(json_data, indent=4)
    for flight in data['flights']:
        if flight["departure"] == departure and flight["arrival"] == arrival:
            matching_flights.append(flight)

    return matching_flights


@router.message(Form.dest2)
async def search_handler(message: Message, state: FSMContext) -> None:
    await message.answer("üîç–®—É–∫–∞—î–º–æ –∫–≤–∏—Ç–∫–∏...")
    departure = user_cache.get_hash(message.from_user.id, key='data')
    result = [flight for flight in flights_db.get_document('flights', couchID)['flights'] if
              flight['departure'] == departure and flight['arrival'] == message.text]
    user_cache.set_hash(message.from_user.id, key='data1', value=message.text)
    if result != []:
        kb = [types.KeyboardButton(text="–û–±—Ä–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫‚úàÔ∏è"), types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç")]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[kb],
            resize_keyboard=True)

        await message.answer(f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–≤–∏—Ç–∫–∏:")
        for i in range(0, len(result)):
            result_to_print = str(
                str(result[i]['departure']) + " -> " + str(
                    result[i]['arrival']) + " || " + str(
                    result[i]['departure_time']) + " -> " + str(result[i]['arrival_time']))
            await message.answer(f"{i + 1}) {result_to_print}", reply_markup=keyboard)
    else:
        kb1 = [types.KeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")]
        keyboard1 = types.ReplyKeyboardMarkup(
            keyboard=[kb1],
            resize_keyboard=True)
        await message.answer("–ö–≤–∏—Ç–∫—ñ–≤ –ø–æ –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=keyboard1)
    await state.clear()


@router.message(F.text == "–û–±—Ä–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫‚úàÔ∏è")
async def search_for_tickets_handler(message: Message, state: FSMContext) -> None:
    kb1 = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
    kb2 = [types.KeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")]
    keyboard1 = types.ReplyKeyboardMarkup(
        keyboard=[kb1, kb2],
        resize_keyboard=True)
    await message.answer("–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–∑–∏—Ü—ñ—ó, —â–æ–± –æ–±—Ä–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫:", reply_markup=keyboard1)
    await state.set_state(Form.select)


@router.message(Form.select)
async def select_tickets_handler(message: Message, state: FSMContext) -> None:
    global message_to_int
    kb = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏üîç"), types.KeyboardButton(text="–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)

    tickets = [flight for flight in flights_db.get_document('flights', couchID)['flights'] if
               flight['departure'] == user_cache.get_hash(message.from_user.id, key='data') and flight[
                   'arrival'] == user_cache.get_hash(message.from_user.id, key='data1')]

    try:
        message_to_int = int(message.text)
        if message_to_int not in range(1, len(tickets) + 1):
            await message.answer(f"‚ùå–í–∏–±–µ—Ä—ñ—Ç—å –∫–≤–∏—Ç–æ–∫, –≤–≤—ñ–≤—à–∏ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ {len(tickets)}", reply_markup=keyboard)
        else:
            selected_ticket = tickets[int(message.text) - 1]
            print(selected_ticket)

            # query_string_1 = str("–ú—ñ—Å—Ü–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: " + str(selected_ticket['departure'])+ "\n–ú—ñ—Å—Ü–µ –ø—Ä–∏–±—É—Ç—Ç—è: "+ str(selected_ticket['arrival']) +"\n–ß–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: "+ str(selected_ticket['departure_time']) +"\n–ß–∞—Å –ø—Ä–∏–±—É—Ç—Ç—è: "+ str(selected_ticket['arrival_time']))
            query_string_1 = str(
                str(selected_ticket['departure']) + " -> " + str(
                    selected_ticket['arrival']) + " || " + str(
                    selected_ticket['departure_time']) + " -> " + str(selected_ticket['arrival_time']))
            print(query_string_1)
            query_string_2 = str(user_cache.get_hash(message.from_user.id, 'phone'))
            print(query_string_2)
            users_db_updated_record = {
                'tickets': query_string_1
            }
            users_db.update_record(table_name='users', data=users_db_updated_record, where_clause="phone = '" + query_string_2 + "'")

            await message.answer(f"–í–∞—à –∫–≤–∏—Ç–æ–∫: \n{str(query_string_1)}", reply_markup=keyboard)
            await state.clear()

    except Exception as e:
        print(e)
        await message.answer(f"‚ùå–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞", reply_markup=keyboard)


@router.message(F.text == "–ú—ñ–π –∫–≤–∏—Ç–æ–∫üé´")
async def search_for_user_tickets_handler(message: Message) -> None:
    query_string_2 = str(user_cache.get_hash(message.from_user.id, 'phone'))
    tickets_str = manipulate_string(
        str(users_db.fetch_all("SELECT tickets FROM users WHERE phone = '" + query_string_2 + "'")))

    kb = [types.KeyboardButton(text="–ù–∞ –≥–æ–ª–æ–≤–Ω—Éüè†")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)
    if tickets_str != "":
        await message.answer(f"üé´–ó–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏–π –∫–≤–∏—Ç–æ–∫:\n{tickets_str}", reply_markup=keyboard)
    else:
        await message.answer(f"üé´–£ –≤–∞—Å —â–µ –Ω–µ–º–∞ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö –∫–≤–∏—Ç–∫—ñ–≤.", reply_markup=keyboard)


@router.message(F.text == "–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üîç")
async def admin_search_for_user_tickets_handler(message: Message, state: FSMContext) -> None:
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (+380...):")
    await state.set_state(Form.admin_search)


@router.message(Form.admin_search)
async def admin_search_handler(message: Message, state: FSMContext) -> None:
    await state.update_data()
    kb = [types.KeyboardButton(text="–®—É–∫–∞—Ç–∏ –∫–≤–∏—Ç–∫–∏ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞üîç")]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[kb],
        resize_keyboard=True)

    search_result = manipulate_string(
        users_db.fetch_all("SELECT tickets FROM users WHERE phone = '" + message.text + "'"))

    if search_result == "":
        search_result = "‚ùå–ù–µ–º–∞ –¥–∞–Ω–∏—Ö"
    await message.answer(f"–ü–æ—à—É–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ:\n{search_result}", reply_markup=keyboard)


def manipulate_string(input_string):
    if len(input_string) >= 7:
        modified_string = input_string[3:-4]
        return modified_string
    else:
        return "String is too short"


async def main() -> None:
    bot = Bot(TOKEN, parse_mode=ParseMode.HTML)
    await dp.start_polling(bot)


if __name__ == "__main__":
    # Init of PostgreSQL database
    users_db_columns = {
        'id': 'SERIAL PRIMARY KEY',
        'phone': 'TEXT NOT NULL UNIQUE',
        'password': 'TEXT',
        'is_admin': 'BOOLEAN DEFAULT FALSE',
        'tickets': "TEXT DEFAULT '-'"
    }
    users_db.create_table(table_name='users', columns=users_db_columns)

    # Init of CouchDB database
    flights_db.create_database(db_name='flights')
    flights_db.clear_database(db_name='flights')
    couchID = flights_db.push_example_data(db_name='flights')

    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
